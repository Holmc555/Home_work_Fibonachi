1. Ітераційний метод (FibonachiIteration.finab)
Часова складність: O(n). Цикл в методі виконується лінійно від 2 до n, тому кількість операцій зростає лінійно зі збільшенням n.
Просторова складність: O(1). Метод використовує лише фіксовану кількість змінних (a, b, fib), незалежно від розміру вхідних даних.

2. Рекурсивний метод (FibonachiRecursion.fibrec)
Часова складність: O(2^n). У рекурсивному методі кожен виклик функції породжує два подальші виклики,
що призводить до експоненційного зростання кількості викликів зі збільшенням n.
Просторова складність: O(n). Глибина рекурсивного стеку зростає лінійно зі збільшенням n,
оскільки максимальна кількість одночасно збережених викликів функції відповідає значенню n.


3. Метод динамічного програмування (FibonachiDP.fib)
Часова складність: O(n). Подібно до ітераційного методу, цей метод обчислює кожне число Фібоначчі лише один раз,
використовуючи цикл, який проходить від 2 до n.
Просторова складність: O(n). Метод використовує масив розміром n + 1 для зберігання проміжних результатів обчислень.
Таким чином, використання пам'яті зростає лінійно зі збільшенням n.